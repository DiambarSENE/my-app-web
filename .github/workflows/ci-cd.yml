name: ci/cd pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    name: Construire et pousser une image Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |        
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run:  npm install
      
      - name: Build
        run:  npm run build

      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: diambarsene/jcaisse-frontend-app-react:latest

  merge-dev-to-main:
    #needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important pour s'assurer que toutes les branches sont disponibles pour la fusion

      - name: Merge DEV into MAIN
        run: |
          git config --global user.email "d.sene2005@gmail.com"
          git config -- global user.name "diambarsene"
          git fetch origin
          git checkout main
          git merge origin/dev --no-ff -m "Merge branch 'dev' into 'main' via GitHub Actions"
          git push origin main
  
  
  deploy:
    needs: build # merge-dev-to-main
    if: github.ref == 'refs/heads/main' || github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: S'assurer que le répertoire existe sur le VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: mkdir -p /docker-compose-files

      - name: Transférer docker-compose sur le VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./docker-compose-frontend.yml"
          target: "/docker-compose-files"     

      - name: Déployer l'application sur le VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker pull diambarsene/jcaisse-frontend-app-react:latest .
            cd /docker-compose-files
            docker-compose -f docker-compose-frontend.yml up -d

    


          

